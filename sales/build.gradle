plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.0'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'com.netflix.dgs.codegen' version '5.6.6'
}

group = 'com.sales'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-graphql'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework:spring-webflux'
	testImplementation 'org.springframework.graphql:spring-graphql-test'

	implementation(platform('com.netflix.graphql.dgs:graphql-dgs-platform-dependencies:6.0.0'))
	implementation 'com.netflix.graphql.dgs:graphql-dgs-spring-boot-starter'
	implementation 'com.netflix.graphql.dgs:graphql-dgs-extended-scalars'

	implementation 'net.datafaker:datafaker:1.7.0'
	implementation 'org.apache.commons:commons-lang3:3.12.0'

	runtimeOnly 'org.postgresql:postgresql'
}

tasks.named('test') {
	useJUnitPlatform()
}

generateJava {
    packageName = 'com.sales.generated'
    generateClient = true
    typeMapping = [
                    "PositiveInt"    : "java.lang.Integer",
										"PositiveFloat"  : "java.lang.Float",
                    "DateTime"          : "java.time.OffsetDateTime",
										"Date"          : "java.time.LocalDate"
                  ]
}